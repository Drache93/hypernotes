// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */
/* eslint-disable space-before-function-paren */

import { c } from 'hyperschema/runtime'

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @hypernotes/state-request
const encoding0 = {
  preencode(state, m) {
    state.end++ // max flag is 2 so always one byte

    if (m.payload) c.json.preencode(state, m.payload)
    if (m.action) c.string.preencode(state, m.action)
  },
  encode(state, m) {
    const flags =
      (m.payload ? 1 : 0) |
      (m.action ? 2 : 0)

    c.uint.encode(state, flags)

    if (m.payload) c.json.encode(state, m.payload)
    if (m.action) c.string.encode(state, m.action)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      payload: (flags & 1) !== 0 ? c.json.decode(state) : null,
      action: (flags & 2) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @hypernotes/state-response
const encoding1 = {
  preencode(state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.state) c.json.preencode(state, m.state)
  },
  encode(state, m) {
    const flags = m.state ? 1 : 0

    c.uint.encode(state, flags)

    if (m.state) c.json.encode(state, m.state)
  },
  decode(state) {
    const flags = c.uint.decode(state)

    return {
      state: (flags & 1) !== 0 ? c.json.decode(state) : null
    }
  }
}

function setVersion(v) {
  version = v
}

function encode(name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode(name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum(name) {
  switch (name) {
    default:
      throw new Error('Enum not found ' + name)
  }
}

function getEncoding(name) {
  switch (name) {
    case '@hypernotes/state-request':
      return encoding0
    case '@hypernotes/state-response':
      return encoding1
    default:
      throw new Error('Encoder not found ' + name)
  }
}

function getStruct(name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode(state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode(state, m) {
      version = v
      enc.encode(state, m)
    },
    decode(state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
